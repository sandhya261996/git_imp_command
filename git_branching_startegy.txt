1. What is a branching strategy?

Simply put, a branching strategy is something a software development team uses when interacting with a version control system for writing and managing code. As the name suggests, the branching strategy focuses on how branches are used in the development process.

One major purpose of a version control system is to enable a collaborative development environment without overlapping or affecting the codebase. There, each team member modifying the same source code will inevitably be making conflicting code changes. However, we can avoid such conflicts with a version control system by using branches when writing and merging code to a master branch to create the end product.

2. Why you need a branching strategy in DevOps?

A properly implemented branching strategy will be the key to creating an efficient DevOps process. DevOps is focused on creating a fast, streamlined, and efficient workflow without compromising the quality of the end product.

A branching strategy helps define how the delivery team functions and how each feature, improvement, or bug fix is handled. It also reduces the complexity of the delivery pipeline by allowing developers to focus on developments and deployments only on the relevant branches—without affecting the entire product.

3. Selecting a branching strategy ?

The selection process for a branching strategy depends entirely on the users and the project requirements. Factors like the development method, scale, user preferences highly impact this selection. Additionally, other factors like CI/CD tools decide what branching strategies can be used in your DevOps pipeline.

Branching strategies that do not align or make it more difficult to implement Continuous Integration and Continuous Delivery in DevOps pipelines should not be used in a DevOps environment.

A good branching strategy should have the following characteristics:

Provides a clear path for the development process from initial changes to production
Allows users to create workflows that lead to structured releases
Enables parallel development
Optimizes developer workflow without adding any overhead.
Enables faster release cycles
Efficiently integrates with all DevOps practices and tools such as different version control systems
Offers the ability to enable GitOps (if you require it)

4. Common DevOps branching strategies ?
Let’s look at some popular branching strategies currently used in the industry.

1. Git Flow
Git Flow is the most widely known branching strategy that takes a multi-branch approach to manage the source code. This approach consists of two main branches that live throughout the development lifecycle.

Primary Branches
master. The primary branch where all the production code is stored. Once the code in the “develop” branch is ready to be released, the changes are merged to the master branch and used in the deployment.
develop. This is where all the actual development happens. All the pre-production code is stored here, and the completed code of all the supporting branches is merged directly to the develop branch.

2. Support Branches
During the development, developers create different branches for specific use cases using the develop branch as the base. The following are some branches created like that:

feature-* feature branches are used to develop new features and branches off exclusively from the develop branch.
hotfix-* This is to deal with production issues where quick fixes are required. They can branch off from the master itself, but need to be merged to both master and develop branches.
release-* This branch is used to aggregate fixes and improvements and prepare for the production release. It will be branched from the develop branch and merged to both develop and master.

5. what is  GitHub Flow ?
As the name suggests, this strategy was introduced by GitHub, aiming to provide a simple and lightweight approach to manage the development. It adheres to the following guidelines when managing the source control with a single primary branch.

master. The primary branch where code is branched off from and merged to. Anything in the master branch is deployable.
Any change (feature/bug) is made in a new branch derived from the master with a descriptive branch name describing the development.
Commit to the development branch locally and regularly push to the branch.
Create a pull request once the development is done so that the code can be reviewed.
Once the code is reviewed and approved, it must be tested in the branch before merging to the master branch.
From this point, users can immediately deploy the master branch with the new changes.

>>Advantages of GitHub Flow

Relatively simpler approach with a simple workflow
Clean and easily readable Git history
Ability to easily integrate into CI/CD pipelines
Ideal when you need to maintain a single production version

>>Disadvantages of GitHub Flow

An oversimplified approach that is not suitable when dealing with release-based developments
Not suitable when maintaining multiple versions of the code
Can lead to unstable production code if branches are not properly tested before merging with the master

6. How to choose your branching strategy?

All the branching strategies mentioned above are already tried and tested branching strategies that can be used to manage your source code. However, each has its own strengths and weaknesses.

The traditional Git Flow will not be ideal for rapidly evolving DevOps environments.
The other strategies described here try to improve Git Flow and modernize it to fit an agile DevOps process.
So, as always, you have to select the best strategy that satisfies all your requirements and suits your organizational practices.

